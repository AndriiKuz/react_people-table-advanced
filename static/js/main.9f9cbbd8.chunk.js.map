{"version":3,"sources":["types/NavLinks.ts","components/Navbar/Navbar.tsx","App.tsx","components/PageTitle/PageTitle.tsx","pages/NotFoundPage/NotFoundPage.tsx","pages/HomePage/HomePage.tsx","components/Loader/Loader.tsx","types/Sex.ts","components/PersonLink/PersonLink.tsx","utils/constants.ts","components/TableRow/TableRow.tsx","components/TableBody/TableBoby.tsx","utils/searchHelper.ts","components/SearchLink/SearchLink.tsx","types/ColumnHeaders.ts","components/TableHead/TableHead.tsx","components/Table/Table.tsx","api.ts","utils/getPreparedPeople.ts","components/PeopleFilters/PeopleFilters.tsx","utils/applySearchAndFilter.ts","utils/filterPeopleBy.ts","utils/sortPeopleBy.ts","pages/PeoplePage/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["NavLinks","getLinkClass","isActive","classNames","Navbar","className","role","to","Home","People","App","PageTitle","title","NotFoundPage","HomePage","Loader","Sex","PersonLink","person","useSearchParams","searchParams","name","sex","slug","toString","Female","API_URL","ERROR_MESSAGE","CENTURIES","DEFAULT_FILTER_VALUES","centuries","query","sort","TableRow","selectedPersonSlug","born","died","mother","father","motherName","fatherName","TableBoby","people","useParams","map","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","search","ColumnHeaders","TableHead","get","order","handleAddSort","columnHeader","keys","Mother","Father","normalizedColumnHeader","toLowerCase","isSortActive","Table","wait","delay","Promise","resolve","setTimeout","getPeople","fetch","response","ok","Error","json","getPreparedPeople","find","PeopleFilters","setSearchPrams","sexParam","centuriesParams","getAll","queryParam","type","placeholder","onChange","e","target","century","normalizedCentury","includes","centuriesToReceive","filter","centuryParam","length","applySearchAndFilter","stringParams","currentPeople","searchSex","searchCenturies","searchQuery","birthCentury","String","Math","ceil","sexMatch","centuryMatch","queryMatch","some","n","filterPeople","sortField","a","b","item1","item2","localeCompare","sortPeople","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasError","setHasError","visiblePeople","isLoaded","fetchPeople","peopleFromServer","preparedPeople","useEffect","Root","path","element","index","replace","Unknown","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.9f9cbbd8.chunk.js","sourcesContent":["export enum NavLinks {\n  Home = '/',\n  People = '/people',\n  Unknown = '*',\n}\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { NavLinks } from '../../types/NavLinks';\n\ntype Link = {\n  isActive: boolean;\n};\n\nconst getLinkClass = ({ isActive }: Link) => (\n  classNames('navbar-item', { 'has-background-grey-lighter': isActive })\n);\n\nexport const Navbar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink\n          className={getLinkClass}\n          to={NavLinks.Home}\n        >\n          Home\n        </NavLink>\n\n        <NavLink\n          className={getLinkClass}\n          to={NavLinks.People}\n        >\n          People\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  title: string;\n};\n\nexport const PageTitle: React.FC<Props> = ({ title }) => (\n  <h1 className=\"title\">{title}</h1>\n);\n","import { PageTitle } from '../../components/PageTitle';\n\nexport const NotFoundPage = () => (\n  <PageTitle title=\"Page not found\" />\n);\n","import { PageTitle } from '../../components/PageTitle';\n\nexport const HomePage = () => (\n  <PageTitle title=\"Home Page\" />\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum Sex {\n  Male = 'm',\n  Female = 'f',\n}\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { Sex } from '../../types/Sex';\n\ninterface Props {\n  person: Person;\n}\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n  const { name, sex, slug } = person;\n\n  return (\n    <Link\n      to={`../${slug}?${searchParams.toString()}`}\n      className={classNames(\n        { 'has-text-danger': sex === Sex.Female },\n      )}\n    >\n      {name}\n    </Link>\n  );\n};\n","// eslint-disable-next-line max-len\nexport const API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n// eslint-disable-next-line max-len\nexport const NO_MATCHING_PEOPLE_MESSAGE = 'There are no people matching the current search criteria';\nexport const ERROR_MESSAGE = 'Something went wrong';\nexport const NO_PEOPLE_MESSAGE = 'There are no people on the server';\nexport const NO_DATA = '-';\nexport const CENTURIES = [16, 17, 18, 19, 20];\n\nexport const DEFAULT_FILTER_VALUES = {\n  sex: null,\n  centuries: null,\n  query: null,\n  sort: null,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\nimport { NO_DATA } from '../../utils/constants';\n\ntype Props = {\n  person: Person;\n  selectedPersonSlug: string;\n};\n\nexport const TableRow: React.FC<Props> = ({ person, selectedPersonSlug }) => {\n  const {\n    sex,\n    born,\n    died,\n    slug,\n    mother,\n    father,\n    motherName,\n    fatherName,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': slug === selectedPersonSlug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || NO_DATA\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || NO_DATA\n        )}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { TableRow } from '../TableRow';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const TableBoby: React.FC<Props> = ({ people }) => {\n  const { selectedPersonSlug = '' } = useParams();\n\n  return (\n    <tbody>\n      {people.map(person => (\n        <TableRow\n          key={person.slug}\n          person={person}\n          selectedPersonSlug={selectedPersonSlug}\n        />\n      ))}\n    </tbody>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { SearchParams } from '../../types/SearchParams';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children,\n  params,\n  ...props\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{ search: getSearchWith(searchParams, params) }}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum ColumnHeaders {\n  Name = 'Name',\n  Sex = 'Sex',\n  Born = 'Born',\n  Died = 'Died',\n  Mother = 'Mother',\n  Father = 'Father',\n}\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from '../SearchLink';\nimport { SearchParams } from '../../utils/searchHelper';\nimport { ColumnHeaders } from '../../types/ColumnHeaders';\n\nexport const TableHead = () => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const handleAddSort = (columnHeader: string): SearchParams => {\n    switch (sort === columnHeader) {\n      case true: {\n        if (order) {\n          return { order: null, sort: null };\n        }\n\n        return { order: 'desc' };\n      }\n\n      case false:\n      default: {\n        return { order: null, sort: columnHeader };\n      }\n    }\n  };\n\n  return (\n    <thead>\n      <tr>\n        {Object.keys(ColumnHeaders).map(columnHeader => {\n          if (columnHeader !== ColumnHeaders.Mother\n              && columnHeader !== ColumnHeaders.Father) {\n            const normalizedColumnHeader = columnHeader.toLowerCase();\n            const isSortActive = sort === normalizedColumnHeader;\n\n            return (\n              <th key={columnHeader}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {columnHeader}\n                  <SearchLink params={handleAddSort(normalizedColumnHeader)}>\n                    <span className=\"icon\">\n                      <i className={classNames(\n                        'fas',\n                        {\n                          'fa-sort': !isSortActive,\n                          'fa-sort-up': isSortActive && !order,\n                          'fa-sort-down': isSortActive && order,\n                        },\n                      )}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          }\n\n          return <th key={columnHeader}>{columnHeader}</th>;\n        })}\n      </tr>\n    </thead>\n  );\n};\n","import { Person } from '../../types';\nimport { TableBoby } from '../TableBody/TableBoby';\nimport { TableHead } from '../TableHead';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const Table: React.FC<Props> = ({ people }) => (\n  <table\n    data-cy=\"peopleTable\"\n    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n  >\n    <TableHead />\n    <TableBoby people={people} />\n  </table>\n);\n","import { Person } from './types/Person';\nimport { API_URL, ERROR_MESSAGE } from './utils/constants';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  await wait(500);\n\n  try {\n    const response = await fetch(API_URL);\n\n    if (!response.ok) {\n      throw new Error(ERROR_MESSAGE);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(ERROR_MESSAGE);\n  }\n}\n","import { Person } from '../types';\n\nexport const getPreparedPeople = (people: Person[]): Person[] => {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: people.find(({ name }) => name === person.motherName),\n      father: people.find(({ name }) => name === person.fatherName),\n    };\n  });\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from '../SearchLink';\nimport { Sex } from '../../types/Sex';\nimport { CENTURIES, DEFAULT_FILTER_VALUES } from '../../utils/constants';\nimport { getSearchWith } from '../../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchPrams] = useSearchParams();\n  const sexParam = searchParams.get('sex') || '';\n  const centuriesParams = searchParams.getAll('centuries') || [];\n  const queryParam = searchParams.get('query') || '';\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const query = e.target.value || null;\n\n    setSearchPrams(\n      getSearchWith(searchParams, { query }),\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !sexParam })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        {Object.entries(Sex).map(([key, value]) => (\n          <SearchLink\n            key={key}\n            className={classNames({ 'is-active': sexParam === value })}\n            params={{ sex: value }}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={queryParam}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => {\n              const normalizedCentury = century.toString();\n              const isActive = centuriesParams.includes(normalizedCentury);\n\n              const centuriesToReceive = isActive\n                ? (centuriesParams.filter(centuryParam => (\n                  centuryParam !== normalizedCentury\n                ))\n                ) : (\n                  [...centuriesParams, normalizedCentury]\n                );\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={classNames(\n                    'button',\n                    'mr-1',\n                    { 'is-info': isActive },\n                  )}\n                  params={{ centuries: centuriesToReceive }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                { 'is-outlined': centuriesParams.length },\n              )}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={DEFAULT_FILTER_VALUES}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from '../types';\nimport { filterPeople } from './filterPeopleBy';\nimport { sortPeople } from './sortPeopleBy';\n\nexport const applySearchAndFilter = (\n  people: Person[],\n  searchParams: URLSearchParams,\n): Person[] => {\n  const stringParams = searchParams.toString();\n\n  if (!stringParams) {\n    return people;\n  }\n\n  let currentPeople = people;\n\n  if (stringParams.includes('centuries')\n    || stringParams.includes('sex=')\n    || stringParams.includes('query')\n  ) {\n    currentPeople = filterPeople(people, searchParams);\n  }\n\n  if (stringParams.includes('sort') && currentPeople.length) {\n    currentPeople = sortPeople(currentPeople, searchParams);\n  }\n\n  return currentPeople;\n};\n","import { Person } from '../types';\n\nexport const filterPeople = (\n  people: Person[],\n  searchParams: URLSearchParams,\n): Person[] => {\n  const searchSex = searchParams.get('sex');\n  const searchCenturies = searchParams.getAll('centuries');\n  const searchQuery = searchParams.get('query')?.toLowerCase();\n\n  return people.filter(({\n    sex,\n    born,\n    name,\n    motherName,\n    fatherName,\n  }) => {\n    const birthCentury = String(Math.ceil(born / 100));\n\n    const sexMatch = !searchSex || sex === searchSex;\n    const centuryMatch = searchCenturies.length === 0\n      || searchCenturies.includes(birthCentury);\n    const queryMatch = !searchQuery\n      || [name, motherName, fatherName]\n        .some((n) => n?.toLowerCase().includes(searchQuery));\n\n    return sexMatch && centuryMatch && queryMatch;\n  });\n};\n","import { Person } from '../types';\n\nexport const sortPeople = (\n  people: Person[],\n  searchParams: URLSearchParams,\n): Person[] => {\n  const sortField = searchParams.get('sort');\n  const order = searchParams.get('order') ? -1 : 1;\n\n  if (!sortField || !people.length || !(sortField in people[0])) {\n    return people;\n  }\n\n  return [...people].sort((a: Person, b: Person) => {\n    const item1 = a[sortField as keyof Person];\n    const item2 = b[sortField as keyof Person];\n\n    if (typeof item1 === 'string' && typeof item2 === 'string') {\n      return item1.localeCompare(item2) * order;\n    }\n\n    if (typeof item1 === 'number' && typeof item2 === 'number') {\n      return (item1 - item2) * order;\n    }\n\n    return 0;\n  });\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from '../../components/Loader';\nimport { PageTitle } from '../../components/PageTitle';\nimport { Table } from '../../components/Table';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { getPreparedPeople } from '../../utils/getPreparedPeople';\nimport { PeopleFilters } from '../../components/PeopleFilters/PeopleFilters';\nimport { applySearchAndFilter } from '../../utils/applySearchAndFilter';\nimport {\n  ERROR_MESSAGE,\n  NO_PEOPLE_MESSAGE,\n  NO_MATCHING_PEOPLE_MESSAGE,\n} from '../../utils/constants';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const visiblePeople = applySearchAndFilter(people, searchParams);\n\n  const isLoaded = !hasError && !isLoading;\n\n  const fetchPeople = async () => {\n    try {\n      setHasError(false);\n      setIsLoading(true);\n\n      const peopleFromServer = await getPeople();\n      const preparedPeople = getPreparedPeople(peopleFromServer);\n\n      setPeople(preparedPeople);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n\n  return (\n    <>\n      <PageTitle title=\"People Page\" />\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {hasError\n                && (\n                  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                    {ERROR_MESSAGE}\n                  </p>\n                )}\n\n              {isLoaded && !people.length\n                && (\n                  <p data-cy=\"noPeopleMessage\">\n                    {NO_PEOPLE_MESSAGE}\n                  </p>\n                )}\n\n              {isLoaded && !visiblePeople.length && (\n                <p>\n                  { NO_MATCHING_PEOPLE_MESSAGE }\n                </p>\n              )}\n\n              {isLoaded && !!visiblePeople.length && (\n                <Table people={visiblePeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Route,\n  Routes,\n  Navigate,\n  HashRouter as Router,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NavLinks } from './types/NavLinks';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path={NavLinks.Home} element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to={NavLinks.Home} replace />} />\n        <Route path={NavLinks.People}>\n          <Route path=\":selectedPersonSlug?\" element={<PeoplePage />} />\n        </Route>\n        <Route path={NavLinks.Unknown} element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\nimport { Root } from './Root';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}